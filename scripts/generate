#!/usr/bin/env python
# Li Xue
# 20-Jul-2024 10:55
#
# search for mu and logvar for desired number
import sys
import os
import re
from argparse import ArgumentParser

import torch

from mnist_vae.module import VAE, DigitClassifier
from mnist_vae.tools.image import save_image

arg_parser = ArgumentParser()
arg_parser.add_argument("vae_path")
arg_parser.add_argument("classifier_path")


if __name__ == "__main__":

    bottleneck_size = 20
    image_directory_name = "generated-images"

    if not os.path.isdir(image_directory_name):
        os.mkdir(image_directory_name)

    args = arg_parser.parse_args()

    vae = VAE(bottleneck_size, 1)
    vae.eval()
    vae.load_state_dict(torch.load(args.vae_path))
    decoder = vae.decoder

    classifier = DigitClassifier(bottleneck_size)
    classifier.load_state_dict(torch.load(args.classifier_path))
    classifier.eval()

    mean = torch.randn(1, bottleneck_size)
    logvar = torch.randn(1, bottleneck_size)
    z = vae.reparameterization(mean, logvar)

    with torch.no_grad():
        generated_image = decoder(z)[0]
        digit = torch.argmax(classifier(z)).item()

    save_image(generated_image, os.path.join(image_directory_name, f"generated-{digit}.png"))
